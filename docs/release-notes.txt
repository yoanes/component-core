==== Version 2.0.1 (tag: core_v2_0_1) ====

Removed more code no longer needed with the Content Rendering Framework migration:
* Removed all code for serving JavaScript via a Spring controller. 
* Removed all device config related code.
* Removed compMcsBasePath.tag, ScriptTag and LinkTag and associated classes.

Now depends on:
* <dependency org="com.sensis" name="wl-build-scripts" rev="2.0.5" conf="buildBootstrap->default" />
* <dependency org="com.sensis" name="wl-crf" rev="0.1.2-002" conf="default" />.
* <dependency org="com.sensis" name="wl-webapp-testbed" rev="2.0.5" conf="showcase->default"/>

Upgrade notes:
* Any calls to the following JSP tags must be removed:
    * <base:compMcsBasePath /> 
    * <base:script /> - use <crf:script /> instead.
    * <base:link /> - use <crf:link /> instead.
* Any references to the following Spring beans must be removed:
    * core.comp.abstractResourceBundleLoaderController
    * core.comp.abstractGetJavaScriptBundle
    * core.comp.getJavaScriptBundle
    * core.comp.getJavaScriptBundleMember
    * core.comp.abstractResourceBundleLoader
    * core.comp.resourceBundleLoader
* Any use of the device config and device config registry infrastructure must be removed.    

==== Version 2.0.0-003 (tag: core_v2_0_0-003) ====

Removed dependency:
    <dependency org="com.sensis" name="ems-cxf-client" rev="1.6" conf="showcase->default"/>
    
Now depends on:
    <dependency org="com.sensis" name="wl-webapp-testbed" rev="2.0.4" conf="showcase->default"/>            

==== Version 2.0.0-002 (tag: core_v2_0_0-002) ====

Removed dependency:
- <dependency org="com.sensis" name="sdpCommon-manager" rev="1.0-050" conf="showcase->default"/>

==== Version 2.0.0-001 (tag: core_v2_0_0-001) ====

Jiras:
- CUI-293: NEW: core component - Content Rendering Framework migration
    - Now depends on:
    
        <dependency org="com.sensis" name="wl-build-scripts" rev="2.0.2" conf="buildBootstrap->default" />
        <dependency org="com.sensis" name="wl-crf" rev="0.1.1-005" conf="default" />
        <dependency org="com.sensis" name="sdpCommon-volantis" rev="0.6-012" conf="default"/>
        <dependency org="com.sensis" name="wl-webapp-testbed" rev="2.0.1" conf="showcase->default"/>                        

    - Added showcase/resources/crf-environment.properties.desk and 
      showcase/web/WEB-INF/crf-config/default-crf-config.xml.
      
    - Removed the following classes that are now provided by crf:
        - LazyPropertiesInjectingPropertyPlaceholderConfigurer
        - DynamicTagAttribute

    - base/setup.tag: replaced Volantis pipeline:value-of tags with crf:deviceProperty.
    
    - Removed PropertyPlaceholderConfigurer in coreComponentPropertiesContext.xml that
      was loading global-version.properties.
      
    - Added README files under new dirs: showcase/web/resources/css, showcase/web/resources/images,
      showcase/web/resources/javascript. 
      
    - Updated config for a sandpit-uidev deployment.
    
    - TODO: remove old JavaScript related controllers, bundle explosion and config. 
    
Upgrade notes:
- base:setup and logging:setup tags require the device to be passed in: 

    <base:setup device="${context.device}"/>
    <logging:setup device="${context.device}"/>
    
==== Version 1.1.6 (tag: core_v1_1_6) ====

Fixed showcase so it now deploys. Broke this in some earlier version when upgrading build scripts
(looks like I skipped a few steps from the build script release notes).

Upgrade notes:
- Upgrade should be transparent.    

==== Version 1.1.5 (tag: core_v1_1_5) ====

DynamicTagAttribute now implements equals, hashCode, toString methods.

==== Version 1.1.4 (tag: core_v1_1_4) ====
- Ignore the log button when traversing the node tree

==== Version 1.1.3 (tag: core_v1_1_3) ====
- Introduce the mootools.add-on.js for additional core stuff on top of mootools

==== Version 1.1.2 (tag: core_v1_1_2) ====
- Intoduce the "Log to server" button in the logging component to trigger the server side log via user interaction.

==== Version 1.1.1 (tag: core_v1_1_1) ====

Fixed:
- CUI-275: Device Config - infrastructure should be simplified somehow
    - Now depends on:
        - <dependency org="com.sensis" name="wl-build-scripts" rev="1.2.0" conf="buildBootstrap->default" />
    - Added ivy publication that will be published by default:
        - <artifact name="wl-core-component-device-config-xsd" type="xsd" ext="zip" conf="default"/>        
    - Deleted src/resources/xjb        
    - Added src/resources/au/com/sensis/mobile/web/component/core/device/device-config-xsd-catalog.xml
    - Regenerated the JAXB artifacts from device-config.xml using the new build scripts.
    
Upgrade notes:
- Upgrade should be transparent.    

==== Version 1.1.0 (tag: core_v1_1_0) ====

Fixed:
- CUI-274 JavaScript Serving - relationship between javascript-bundles.xml, Volantis mscr files, JavaScript URLs 
  and Spring context files is confusing
    - major refactoring. The core component now essentially consists of the following packages in terms of JavaScript, 
      JSP tag files and MCS policies:
        core/base
        core/logging
        core/util    
        core/ems (which may be moved into an EMS component if we componentise the sdpcommon/modules/manager???)
        
      Previously, the core component was a bit confusing in being a munging of top level core, logging, util and 
      ems components.
      
      The impact of the new packages can be observed in the following:
      1. javascript-bundles.xml: each bundle has a "package" (formerly "subpackage") like "core/base", "core/logging".
      2. Each package's mscr file has relative URLs that start with the package. Example for the "core/base"
         package:
      
            <relative>core/base/js/core-component-nokiaS60-@project.version.complete@.js</relative>
            
         Example for the "core/logging" package:
            
            <relative>core/logging/js/logging-component-apple-@project.version.complete@.js</relative>
            
      3. src/javascript now has subdirectories like src/javascript/core/base and src/javascript/core/logging.
         ie. the directories under src/javascript match the packages defined in javascript-bundles.xml (note
         that this is just by convention. javascript-bundles.xml is very flexible if this structure needs to 
         be different, for example to share javascript files between multiple packages).
      4. src/resources/au/com/sensis/mobile/web/component/ now only has one set of context files and property files
         for the whole component. These are under src/resources/au/com/sensis/mobile/web/component/core. The following
         have been removed:
            src/resources/au/com/sensis/mobile/web/component/deviceport
            src/resources/au/com/sensis/mobile/web/component/logging
            src/resources/au/com/sensis/mobile/web/component/util
         
         A significant consequence is that no context files or property files need be modified/added if a new
         javascript package is defined in javascript-bundles.xml.
      5. core.tld has been renamed to base.tld. The URI has been changed to 
         /au/com/sensis/mobile/web/component/core/base/base.tld.  
       
            
Upgrade notes:
- Now depends on <dependency org="com.sensis" name="wl-build-scripts" rev="1.1.0" conf="buildBootstrap->default" />.
- Components that depend on this component, now require wl-build-scripts 1.1.0 or above to still build correctly.
- javascript-bundles.xml need to be updated to change the "subpackage" attribute of each bundles
  element to "package". 
- When a new javascript package is defined in javascript-bundles.xml, there is no longer any need to 
  modify/add context files or property files in order for the javascript to be correctly served. Note that this relies
  on the modified handlerMapping in coreComponentSpringMVCContext.xml that now looks for any number of paths under the 
  prefix: 
  
    <bean name="core.comp.handlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        ...
        <property name="mappings">
            <value>
                @{core.comp.handler.mapping.url.prefix}/**/js/**/*=core.comp.getJavaScriptBundle
                @{core.comp.handler.mapping.url.prefix}/**/jsmember/**/*=core.comp.getJavaScriptBundleMember
            </value>
        </property>
    ...
  So for this principle to apply to your component, you need to modify your handlerMapping similarly.
- JSPs that previously imported the core tag lib like so:

    <%@ taglib prefix="core" uri="/au/com/sensis/mobile/web/component/core/core.tld"%>
  
  should now import the base tag lib instead:
  
    <%@ taglib prefix="base" uri="/au/com/sensis/mobile/web/component/core/base/base.tld"%>     
    
  The tags in the taglib are the same as before.  
- You should ensure that you redeploy your policies and preferably delete the old policies first.

==== Version 1.0.36 (tag: core_v1_0_36) ====
- Deviceport: use device-width parameter on the apple

==== Version 1.0.35 (tag: core_v1_0_35) ====
- Deviceport: additional bundle for HTC Touch HD 2

==== Version 1.0.34 (tag: core_v1_0_34) ====

Fixed:
- CUI-265 Core component - cache bypass is redundant now that JavaScript files are cached indefinitely
    - removed all code related to the cache bypass. 

Upgrade notes:
- If you're working on a component that depends on this wl-core-component, you should also update your wl-webapp-testbed
  dependency to 1.0.9.       
- The core.comp.bundleExploderAndCacheBypassActivatonFilter Spring bean has been renamed to core.comp.bundleExploderActivatonFilter.
  Make sure you update references made from your web.xml (if any).
- If your project overrides core-environment.properties.*, note that the following properties have been removed:
    - env.bypassClientCacheEnabled
    - env.bypassClientCacheInitialValue

==== Version 1.0.33 (tag: core_v1_0_33) ====

Fixed:
- CUI-239 Create an Intermediate Map component
    - Also enabled the following devices to receive the nokiaS60 JavaScript from the core component.
    
        <device>Nokia-6720c</device>
        <device>Nokia-E51</device>
        <device>Nokia-E71</device>
        
Upgrade notes:
- redeploy your policies.        

==== Version 1.0.32 (tag: core_v1_0_32) ====
ReportingUtilities fix

==== Version 1.0.31 (tag: core_v1_0_31) ====

Added mootools specialisations for some devices.
Removed unneeded sensis-widgets.js.
Futher device port tweaks.

==== Version 1.0.30 (tag: core_v1_0_30) ====

Fixed:
- CUI-104 Map Component - (Location, POIs, Routes) - Intermediate Map - Server Side
    - Added new JsonLeadingAndTrailingWhitespaceTrimmingFilter exposed as a Spring bean
      with name of core.comp.jsonLeadingAndTrailingWhitespaceTrimmingFilter. 
      Webapps can insert this filter into their Filter chain to trim leading and trailing
      spaces from JSON responses. This is especially useful if you are producing
      your JSON responses via JSPs. The filter should be added to web.xml like so:
      
    <filter>
        <filter-name>jsonLeadingAndTrailingWhitespaceTrimmingFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetBeanName</param-name>
            <param-value>core.comp.jsonLeadingAndTrailingWhitespaceTrimmingFilter</param-value>
        </init-param>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>jsonLeadingAndTrailingWhitespaceTrimmingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
      
==== Version 1.0.29 (tag: core_v1_0_29) ====

Added deviceConfig tag to allow a component's JSPs to access the DeviceConfig for the 
current user's device.

==== Version 1.0.28 (tag: core_v1_0_28) ====

deviceport fine tuned for apple devices.
deviceport added for some Android-OS devices.

==== Version 1.0.27 (tag: core_v1_0_27) ====

add a deviceport subpackage to the core to solve the viewport and phonelink issue.

==== Version 1.0.26 (tag: core_v1_0_26) ====

ChainedResourceBundleLoader no longer logs the exception stack trace when an intermediate
ResourceBundleLoader fails to load the requested resource. This eliminates frequent, expected
stack traces from being logged in dev environments. This is a low risk measure for prod 
since these exceptions should _never_, _ever_ happen in prod.

Upgrade notes:
- The upgrade should be transparent.

==== Version 1.0.25 (tag: core_v1_0_25) ====

Fixes:
- CUI-171: JavaScript Serving - possible caching issue
    - Now depends on wl-build-scripts 1.0.10.
    - All mscr files include the @project.version.complete@ token
      in JavaScript file names.
    - core.comp.abstractResourceBundleLoaderController Spring bean now configured
      to make clients cache the returned file indefinitely. core.comp.getJavaScriptBundleMember 
      Spring bean still uses the default Spring semantics (ie. do not generate cache headers).
- EntryAndExitLoggingWebRequestInterceptor now only logs at debug level, not info level.      

Upgrade notes:
- Now depends on wl-build-scripts 1.0.10.

==== Version 1.0.24 (tag: core_v1_0_24) ====

All Volantis mscr files made as general as possible. ie. serve up JavaScript to the "Master"
variant if possible. Components that depend on the core setup tags (eg. core:setup, ems:setup etc.)
should check their own device-config.xml to determine whether or not to actually invoke
the core setup tags. Example from the map component:

<c:if test="${not empty map && map.mapImageRetrievalDeferredToClient}">
    <%-- Setup components that we depend on. --%>
    <core:setup />
    <ems:setup />
    <util:setup />
    <logging:setup />

    .
    .
    .
</c:if>

This solution is required due to:
1. Each component has a different set of devices that they wish to target.
2. If we were to configure the core component's mscr files to target the superset of devices
   required by all components, it may result in some devices being served JavaScript that they
   shouldn't be.  

==== Version 1.0.23 (tag: core_v1_0_23) ====

Implemented:
- CUI-167: Core component - device-config.xml to support configuration of device OS versions
    - au.com.sensis.mobile.web.component.core.device.xsd modified to support the following 
      matching algorithm:
      1. The Device's name is matched against the IdentifiedDeviceConfig elements (using
         a Map style lookup).
      2. If an IdentifiedDeviceConfig is found, the Device's userAgent is matched against
         each UserAgentDeviceConfig's regular expressionn in the IdentifiedDeviceConfig.
      3. If a UserAgentDeviceConfig is matched, return its AbstractDeviceConfig. Otherwise
         return the IdentifiedDeviceConfig's AbstractDeviceConfig.
      4. If no IdentifiedDeviceConfig was matched, return the defaultDeviceConfig
         defined in your device-config.xml.
         
Upgrade Notes:
- AbstractDeviceConfigRegistry constructor no longer accepts a defaultDeviceConfig.
  The default is now configured in device-config.xml.
- au.com.sensis.mobile.web.component.core.device.xsd has changed. This means you must:

  a) Delete the following files from your component project:
  
    src/resources/xjb/generated/*.xjb 

  b) Manually get the following files from the core component project and
     and copy them to the corresponding paths in your component project.
  
    b.1) src/resources/au/com/sensis/mobile/web/component/core/device/au.com.sensis.mobile.web.component.core.device.xsd
    
    b.2) src/resources/xjb/generated/au.com.sensis.mobile.web.component.core.device.xjb
     
  c) Run the following target in your component project:
  
    ant device-config-xjc
    
  d) In Eclipse, refresh the paths in your component project that corresponds to the following paths:
  
    d.1) src/java/au/com/sensis/mobile/web/component/core/device/generated
    
    d:2) src/resources/xjb/generated/
    
     These generated files should be committed to your project.
    
- Update your device-config.xml XSD file (eg. au.com.sensis.mobile.web.component.map.device.xsd) to 
  conform to the new core XSD. In particular, DeviceConfig has been renamed to AbstractDeviceConfig.    
- Update your device-config.xml to conform to the new schema.
- Now depends on sdpCommon-volantis 0.6-008 so make sure you don't have old libs lying around
  after an ivy resolve.

==== Version 1.0.22 (tag: core_v1_0_22) ====

JavaScript logger no longer enabled in sandpit-test environment.

==== Version 1.0.21 (tag: core_v1_0_21) ====

compMcsBasePath.tag updated to log entry and exit at debug level instead of info level. 

==== Version 1.0.20 (tag: core_v1_0_20) ====

Fixed CUI-130: Map Component - remove OpenLayers.mscr and change to use prod EMS when EMS prod drop occurs on 12 Mar 2010
- setup.tag no longer includes the OpenLayers mscr file.
- EMS.mscr.* files for showcase now use EMS prod URL.

==== Version 1.0.19 (tag: core_v1_0_19) ====

AbstractDeviceConfigRegistry.getDeviceConfig will now try to look up parent/fallback device
names in the config until a match is found. This allows the config to defince ids for
generic device categories like "Apple" instead of specific device names like "Apple-iphone".

Now depends on sdpCommon-volantis 0.6-007 explicitly.

==== Version 1.0.18 (tag: core_v1_0_18) ====

Fixed:
- CUI-133 Auto Complete - refactor JavaScript EMS interface out of map component
    - Created new ems sub-component and created tag files and MCS policies for it. Moved EMS
      related MCS policies from the map component into here.
    
Other changes:    
- Entry and exit logging in tag files now occurs at debug level instead of info level.

==== Version 1.0.17 (tag: core_v1_0_17) ====

Fixes "CUI-79: Component Showcase Deployed with expanded jar - Hotswapped JavaScript files are ignored by Tomcat".

ServletContextResourceBundleLoader enhanced to support an injected path prefix. 

coreComponentResourceBundleLoadersContext.xml now configures core.comp.resourceBundleLoader
to be a ChainedResourceBundleLoader by default that contains a chain of
ClasspathResourceBundleLoader followed by a ServletContextResourceBundleLoader . Allows JavaScript
to be looked up under the classpath first, then if this fails, looked up in an JAR expanded location (WEB-INF/). 
This allows for hot deploy of JavaScript, unlike the ClasspathResourceBundleLoader which is susceptible to class 
loader caching (eg. in Tomcat).

==== Version 1.0.16 (tag: core_v1_0_16) ====

Added XmlHttpRequestDetector. New coreComponentUtilContext.xml defines a XmlHttpRequestDetector bean
exposed as "core.comp.xmlHttpRequestDetector".  

Application upgrade instructions: If your application is Spring based, simply inject the above
bean into all beans that need it and invoke its isXmlHttpRequest method as needed. 
The context file should be picked up automatically if you have followed the standard steps for making 
a webapp ready for components 
(see http://wiki.sensis.com.au/display/WIRE/UI+Components+-+Using+In+A+WebApp#UIComponents-UsingInAWebApp-Makeyourwebappreadyforcomponents).
 
If your application is not Spring based, you should typically instantiate an instance where needed
and call its isXmlHttpRequest method where needed. 

==== Version 1.0.15 (tag: core_v1_0_15) ====

Fixed ivy.xml so that struts2-core is only a dependency of the showcase configuration.

==== Version 1.0.14 (tag: core_v1_0_14) ====

AbstractDeviceConfigRegistry is now a bit more robust. Throws a DeviceConfigRegistryException
if the device config contains a duplicate device id. AbstractDeviceConfigRegistry also now
exclusively throws DeviceConfigRegistryExceptions instead of the generic RuntimeException.

==== Version 1.0.13 (tag: core_v1_0_13) ====

AbstractDeviceConfigRegistry now implements the DeviceConfigRegistry 
interface to facilitate mocking by unit tests. AbstractDeviceConfigRegistry
follows a pattern of marking all non-private methods as final unless
they are intended to be overridden, so mocking an instance of the abstract
class using the EasyMock class extension will not work.. 

==== Version 1.0.12 (tag: core_v1_0_12) ====

Added au.com.sensis.mobile.web.component.core.device.xsd and now
depends on wl-build-scripts 1.0.7 for device-config-xjc target.

Added JAXB classes and xjb files generated by the device-config-xjc target.

Added new AbstractDeviceConfigRegistry base class. Now depends on sdpCommon-utils 
1.0-005 so that we can use the new XMLBinder.

==== Version 1.0.11 (tag: core_v1_0_11) ====

Volantis policies configured so that JavaScript will be served up to all devices.
This is in preparation for someone to test targeted devices against components, the findings
of which will serve to refine the Volantis policies.

==== Version 1.0.10 (tag: core_v1_0_10) ====

Added Android-OS to MCS mscr policies.

==== Version 1.0.9 (tag: core_v1_0_9) ====

ReportingUtilities JavaScript class: "to" method now always
sets the "xrw=xhr" request parameter. Some phones like the Nokia 
6120 do not allow request headers to be set
so mootools fails to set the 'X-Requested-With header' to 'XMLHttpRequest' (and
the browser itself doesn't set this). So we always set an additional request
parameter corresponding to the header. This allows server side code to detect AJAX requests.  

==== Version 1.0.8 (tag: core_v1_0_8) ====

Added new util subcomponent to serve up Yoanes' utils.js. Widened the list 
of devices that the core and logging MSCR files apply to (still not the 
"real" list - just for current adhoc testing).

==== Version 1.0.7 (tag: core_v1_0_7) ====

Added custom autoIncId JSP tag, implemented by the AutoIncIdTag class.

==== Version 1.0.6 (tag: core_v1_0_6) ====

Deliverable from iteration 1.0.6 (and 1.0.5 since I skipped that tag) 
of the rockit Common UI project (http://jira.sensis.com.au/browse/CUI). 
These iterations focused mainly on stabilising the framework.

==== Version 1.0.4 (tag: core_v1_0_4) ====

Deliverable from iteration 1.0.4 of the rockit Common UI project 
(http://jira.sensis.com.au/browse/CUI). This iteration focused mainly 
on adding logging support to the current framework, adding a template
component and fixing up various other, smaller issues.

==== Version 1.0.3 (tag: core_v1_0_3) ====

Deliverable from iteration 1.0.3 of the rockit Common UI project 
(http://jira.sensis.com.au/browse/CUI). This iteration focused mainly 
on testing the current framework by prototyping the networknav and
map components and (locally) integrating them into WPM.

==== Version 1.0.1-001 (tag: not tagged yet) ====

Next bleeding edge version on the way to 1.0.2 for the rockit 
Common UI project. Changes summary:
* ScriptTag is now abstracted away from Volantis.  

==== Version 1.0.1 (tag: core_v1_0_1) ====

Deliverable from iteration 1.0.1 of the rockit Common UI project 
(http://jira.sensis.com.au/browse/CUI). This iteration focused mainly 
on the project structure, testbed structure and build scripts. 
All build targets should work.
 
 